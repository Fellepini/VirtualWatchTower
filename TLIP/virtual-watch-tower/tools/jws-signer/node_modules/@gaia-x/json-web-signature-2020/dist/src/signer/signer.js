"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Signer = void 0;
const jose_1 = require("jose");
const luxon_1 = require("luxon");
const context_handler_1 = require("../jsonld/context.handler");
const proof_model_1 = require("../model/proof.model");
/**
 * In charge of transforming JSON-LD documents into verifiable credentials, the Signer is the master of proof creation.
 */
class Signer {
    constructor(hasher, options) {
        this.hasher = hasher;
        this.privateKey = options.privateKey;
        this.privateKeyAlg = options.privateKeyAlg;
        this.verificationMethod = options.verificationMethod;
    }
    /**
     * Signs a document to make it an untamperable verifiable credential.
     *
     * @param document the document to sign
     */
    async sign(document) {
        const contextHandler = context_handler_1.ContextHandler.fromContext(document['@context']).add(proof_model_1.JWS2020_CONTEXT);
        const verifiableCredential = Object.assign(Object.assign({}, document), { '@context': contextHandler.toContext(), proof: {
                type: 'JsonWebSignature2020',
                created: luxon_1.DateTime.now().toISO(),
                proofPurpose: 'assertionMethod',
                verificationMethod: this.verificationMethod
            } });
        const hash = await this.hasher.hash(document, verifiableCredential.proof);
        verifiableCredential.proof.jws = await new jose_1.CompactSign(hash)
            .setProtectedHeader({
            alg: this.privateKeyAlg,
            b64: false,
            crit: ['b64']
        })
            .sign(this.privateKey);
        return verifiableCredential;
    }
}
exports.Signer = Signer;
//# sourceMappingURL=signer.js.map