"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OfflineDocumentLoaderBuilder = void 0;
const jsonld_1 = require("jsonld");
const credentials_examples_v1_context_json_1 = __importDefault(require("../context/credentials_examples_v1_context.json"));
const credentials_v1_context_json_1 = __importDefault(require("../context/credentials_v1_context.json"));
const jws2020_v1_context_json_1 = __importDefault(require("../context/jws2020_v1_context.json"));
const odrl_context_json_1 = __importDefault(require("../context/odrl_context.json"));
/**
 * Loads contexts from the filesystem instead of resolving them through the network.
 * <p>
 *   This class is very useful in the case of rate limiting due to a high number of calls or for running tests in a
 *   controllable environment.
 * </p>
 * <p>
 *   To use your own contexts, you can call the {@link addContext} method.
 *
 *   ```typescript
 *   import MyContext from 'contexts/my-context.json'
 *   import CustomContext from 'contexts/custom-context.json'
 *
 *   const offlineDocumentLoader: DocumentLoader = new OfflineDocumentLoaderBuilder()
 *     .addContext('https://my-context.org/2024/entities/v1', MyContext)
 *     .addContext('https://custom-context.org/2024/entities/v1', CustomContext)
 *     .build()
 *   ```
 */
class OfflineDocumentLoaderBuilder {
    constructor() {
        this.contexts = new Map([
            ['https://www.w3.org/2018/credentials/v1', credentials_v1_context_json_1.default],
            ['https://www.w3.org/2018/credentials/examples/v1', credentials_examples_v1_context_json_1.default],
            ['https://www.w3.org/ns/odrl.jsonld', odrl_context_json_1.default],
            ['https://w3id.org/security/suites/jws-2020/v1', jws2020_v1_context_json_1.default]
        ]);
    }
    addContext(url, context) {
        this.contexts.set(url, context);
        return this;
    }
    build() {
        const nodeDocumentLoader = jsonld_1.documentLoaders.node();
        return async (url) => {
            if (this.contexts.has(url)) {
                return {
                    document: this.contexts.get(url),
                    documentUrl: url
                };
            }
            return nodeDocumentLoader(url);
        };
    }
}
exports.OfflineDocumentLoaderBuilder = OfflineDocumentLoaderBuilder;
//# sourceMappingURL=offline-document.loader.js.map